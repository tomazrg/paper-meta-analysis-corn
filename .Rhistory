data = meta4
)
mm <- gamlss(
yield ~ severity,
sigma.formula = ~ 1,                      # dispers達o constante
nu.formula = ~ location,                  # probabilidade de zero
tau.formula = ~ 1,                        # probabilidade de um (se existir)
family = BEINF,
data = meta4
)
mm <- gamlss(
yield ~ season,
sigma.formula = ~ 1,                      # dispers達o constante
nu.formula = ~ location,                  # probabilidade de zero
tau.formula = ~ 1,                        # probabilidade de um (se existir)
family = BEINF,
data = meta4
)
meta4
mm <- gamlss(
yield/1000 ~ season,
sigma.formula = ~ 1,                      # dispers達o constante
nu.formula = ~ location,                  # probabilidade de zero
tau.formula = ~ 1,                        # probabilidade de um (se existir)
family = BEINF,
data = meta4
)
cor(meta4$yield, meta4$severity)
cor(meta5$yield, meta5$severity)
cor.test(meta5$yield, meta5$severity)
cor.test(meta5$yield, meta5$severity, type = "kendall")
meta5 = meta4 %>%
filter(technology == "conventional") %>%
filter(season == "first")
cor.test(meta5$yield, meta5$severity, type = "kendall")
cor.test(meta5$yield, meta5$severity, type = "pearson")
cor.test(meta5$yield, meta5$severity, type = "pearson")
meta5 = meta4 %>%
filter(technology == "conventional") %>%
filter(season == "second")
cor.test(meta5$yield, meta5$severity, type = "pearson")
meta5 = meta4 %>%
filter(technology == "conventional")
cor.test(meta5$yield, meta5$severity, type = "pearson")
correlation_data <- meta4 %>%
group_by(season,technology) %>%
summarise(r_sev_yld = cor(severity, yield),
n = n(),
Z_sev_yld = 0.5*log((1+r_sev_yld)/(1-r_sev_yld)),
V = 1/(n-3),
vd_sev_yld = 1/(2*(1-r_sev_yld)/n-3)) |>
filter(r_sev_yld != "NA") |>
filter(n > 4)
correlation_data
meta_cor_sev_yld
meta_cor_sev_yld <- rma(Z_sev_yld, V, data = correlation_data)
meta_cor_sev_yld
R_sev_yld <- fisherz2r(Z_sev_yld)
R_sev_yld
R_sev_yld <- fisherz2r(Z_sev_yld)
library(psych)
R_sev_yld <- fisherz2r(Z_sev_yld)
R_sev_yld
R_sev_yld <- fisherz2r(Z_sev_yld)
Z_sev_yld <- meta_cor_sev_yld$b
R_sev_yld <- fisherz2r(Z_sev_yld)
R_sev_yld
predict(meta_cor_sev_yld, transf = transf.ztor)
meta4
correlation_data <- meta4 %>%
group_by(season,technology) %>%
summarise(r_sev_yld = cor(severity/1000, yield),
n = n(),
Z_sev_yld = 0.5*log((1+r_sev_yld)/(1-r_sev_yld)),
V = 1/(n-3),
vd_sev_yld = 1/(2*(1-r_sev_yld)/n-3)) |>
filter(r_sev_yld != "NA") |>
filter(n > 4)
meta_cor_sev_yld <- rma(Z_sev_yld, V, data = correlation_data)
meta_cor_sev_yld
Z_sev_yld <- meta_cor_sev_yld$b
R_sev_yld <- fisherz2r(Z_sev_yld)
R_sev_yld
predict(meta_cor_sev_yld, transf = transf.ztor)
fit_all <- meta4%>%
group_by(season,technology) |>
do(broom::tidy(lm(.$yield ~ .$severity), conf.int=TRUE))
fit_all
fit_all <- meta4%>%
group_by(season,technology) |>
do(broom::tidy(lm(.$yield ~ .$severity  +  factor(.$year)), conf.int=TRUE))
fit_all
meta5
summary(fit_all)
meta4
summary(fit_all)
fit_all
fit_all <- meta4%>%
group_by(season,technology) |>
do(broom::tidy(lm(.$yield ~ .$severity  +  factor(.$year)), conf.level = 0.90))
fit_all
fit_all <- meta4%>%
group_by(season,technology) |>
do(broom::tidy(lm(.$yield ~ .$severity  +  factor(.$year)), conf.level = 0.90))
summary(fit_all)
fit_all
fit_all <- meta4%>%
group_by(season,technology) |>
do(broom::tidy(lm(.$yield ~ .$severity  +  factor(.$year)), conf.level = 0.90,conf.int = TRUE))
fit_all
mod_brms <- brm(
formula = yield ~ severity + (1 | year) + (1 | location),
data = meta4,
family = gaussian(),
chains = 4, cores = 4, iter = 2000,
seed = 123
)
library(brms)
mod_brms <- brm(
formula = yield ~ severity + (1 | year) + (1 | location),
data = meta4,
family = gaussian(),
chains = 4, cores = 4, iter = 2000,
seed = 123
)
mod_brms
meta5 = meta4 %>%
filter(technology == "BT") %>%
filter(season == "first")
mod_brms <- brm(
formula = yield ~ severity + (1 | year) + (1 | location),
data = meta5,
family = gaussian(),
chains = 4, cores = 4, iter = 2000,
seed = 123
)
mod_brms
mod_beinf <- gamlss(
yield ~ severity/100,
sigma.formula = ~ 1,                      # dispers達o constante
nu.formula = ~ location,                  # probabilidade de zero
tau.formula = ~ 1,                        # probabilidade de um (se existir)
family = BEINF,
data = meta3
)
model_gam <- gam(
yield ~ s(severity),
data = meta4
)
library(gam)
model_gam <- gam(
yield ~ s(severity),
data = meta4
)
summary(model_gam)
model_gam <- gam(
yield ~ s(severity) + season,
data = meta4
)
summary(model_gam)
model_gam <- gam(
yield ~ s(severity) + season,
data = meta4
)
summary(model_gam)
plot(model_gam)
install.packages("robustbase")
library(robustbase)
rob_mod <- lmrob(yield ~ severity, data = meta4)
summary(rob_mod)
plot(rob_mod)
rob_mod <- lmrob(yield ~ severity + season, data = meta4)
plot(rob_mod)
brm_mod <- brm(
bf(yield ~ s(severity) + season +(1 | location)),
data = meta4,
family = gaussian(),
chains = 4, iter = 2000, seed = 123
)
brm_mod <- brm(
bf(yield ~ s(severity)),
data = meta4,
family = gaussian(),
chains = 4, iter = 1000, seed = 123
)
summary(brm_mod)
meta4
meta4 = meta3
meta4$yield =meta4$yield*1000
meta5 = meta4 %>%
#filter(technology == "BT") %>%
filter(season == "first")
mod_brms <- brm(
formula = yield ~ severity + (1 | year),
data = meta5,
family = gaussian(),
chains = 4, cores = 4, iter = 2000,
seed = 123
)
summary(mod_brms)
meta5 = meta4 %>%
#filter(technology == "BT") %>%
filter(season == "second")
mod_brms <- brm(
formula = yield ~ severity + (1 | year),
data = meta5,
family = gaussian(),
chains = 4, cores = 4, iter = 2000,
seed = 123
)
summary(mod_brms)
plot(mod_brms)
summary(mod_brms)
pp_check(mod_brms)
pp_check(mod_brms, type = "scatter", nsamples = 100)
plot(mod_brms)
pp_check(mod_brms, type = "intervals")
bayes_R2(mod_brms)
res <- residuals(mod_brms)
fitted_vals <- fitted(mod_brms)
plot(fitted_vals, res)
summary(mod_brms)
loo_res <- loo(mod_brms)
print(loo_res)
mod_brms <- brm(
formula = yield ~ severity + (1 | location),
data = meta5,
family = gaussian(),
chains = 4, cores = 4, iter = 2000,
seed = 123
)
res <- residuals(mod_brms)
fitted_vals <- fitted(mod_brms)
plot(fitted_vals, res)
meta5 = meta4 %>%
#filter(technology == "BT") %>%
filter(season == "first")
mod_brms <- brm(
formula = yield ~ severity + (1 | year),
data = meta5,
family = gaussian(),
chains = 4, cores = 4, iter = 2000,
seed = 123
)
res <- residuals(mod_brms)
fitted_vals <- fitted(mod_brms)
plot(fitted_vals, res)
pp_check(mod_brms)
pp_check(mod_brms, type = "scatter", nsamples = 100)
bayes_R2(mod_brms)
meta5 = meta4 %>%
#filter(technology == "BT") %>%
filter(season == "first") %>%
#dplyr::group_by(season,technology) %>%
do({
model <- lm(.$yield ~ .$severity + factor(.$year))
tidy_model <- tidy(model)
confint_model <- confint(model)
bind_cols(tidy_model, confint_model)
})
meta5
Intercepts <- meta5 |>
filter(term == "(Intercept)")
Slopes <-  meta5 |>
filter(term == ".$severity")
mb_1 <- rma(yi = estimate ~ factor(season), sei = std.error, data = Intercepts)
mb_1 <- rma(yi = estimate, sei = std.error, data = Intercepts)
summary(mb_1)
mb_2 <- rma(yi = estimate, sei = std.error, data = Slopes)
summary(mb_2)
meta5 = meta4 %>%
#filter(technology == "BT") %>%
filter(season == "second") %>%
#dplyr::group_by(season,technology) %>%
do({
model <- lm(.$yield ~ .$severity + factor(.$year))
tidy_model <- tidy(model)
confint_model <- confint(model)
bind_cols(tidy_model, confint_model)
})
Intercepts <- meta5 |>
filter(term == "(Intercept)")
Slopes <-  meta5 |>
filter(term == ".$severity")
mb_1 <- rma(yi = estimate, sei = std.error, data = Intercepts)
summary(mb_1)
mb_2 <- rma(yi = estimate, sei = std.error, data = Slopes)
summary(mb_2)
summary(mod_brms)
meta5 = meta4 %>%
#filter(technology == "BT") %>%
filter(season == "first") %>%
#dplyr::group_by(season,technology) %>%
do({
model <- lm(.$yield ~ .$severity + factor(.$year))
tidy_model <- tidy(model)
confint_model <- confint(model)
bind_cols(tidy_model, confint_model)
})
Slopes <-  meta5 |>
filter(term == ".$severity")
mb_2 <- rma(yi = estimate, sei = std.error, data = Slopes)
summary(mb_2)
meta4 %>%
ggplot(aes(yield,severity))+
geom_point()+
geom_smooth(method = "lm")+
facet_wrap(~season)
meta4 %>%
ggplot(aes(severity,yield))+
geom_point()+
geom_smooth(method = "lm")+
facet_wrap(~season)
meta4 %>%
filter(!technology == "BT") %>%
ggplot(aes(severity,yield))+
geom_point()+
geom_smooth(method = "lm")+
facet_wrap(~season)
meta4 %>%
filter(!technology == "conventional") %>%
ggplot(aes(severity,yield))+
geom_point()+
geom_smooth(method = "lm")+
facet_wrap(~season)
meta4 %>%
filter(!application == "treated") %>%
ggplot(aes(severity,yield))+
geom_point()+
geom_smooth(method = "lm")+
facet_wrap(~season)
meta4 %>%
filter(!application == "treated") %>%
ggplot(aes(log(severity),yield))+
geom_point()+
geom_smooth(method = "lm")+
facet_wrap(~season)
meta4 %>%
ggplot(aes(log(severity),yield))+
geom_point()+
geom_smooth(method = "lm")+
facet_wrap(~season)
meta4 %>%
ggplot(aes(severity,yield))+
geom_point()+
geom_smooth(method = "lm")+
facet_wrap(~season)
meta5 = meta4 %>%
#filter(technology == "BT") %>%
filter(season == "first") %>%
#dplyr::group_by(season,technology) %>%
do({
model <- lm(.$yield ~ .$severity + factor(.$year))
tidy_model <- tidy(model)
confint_model <- confint(model)
bind_cols(tidy_model, confint_model)
})
Intercepts <- meta5 |>
filter(term == "(Intercept)")
Slopes <-  meta5 |>
filter(term == ".$severity")
mb_1 <- rma(yi = estimate, sei = std.error, data = Intercepts)
summary(mb_1)
mb_2 <- rma(yi = estimate, sei = std.error, data = Slopes)
summary(mb_2)
meta4 %>%
ggplot(aes(severity,yield))+
geom_point()+
geom_smooth(method = "lm")+
facet_wrap(~season)
summary(mb_1)
summary(mb_2)
meta5 = meta4 %>%
#filter(technology == "BT") %>%
filter(season == "second") %>%
#dplyr::group_by(season,technology) %>%
do({
model <- lm(.$yield ~ .$severity + factor(.$year))
tidy_model <- tidy(model)
confint_model <- confint(model)
bind_cols(tidy_model, confint_model)
})
Intercepts <- meta5 |>
filter(term == "(Intercept)")
Slopes <-  meta5 |>
filter(term == ".$severity")
mb_1 <- rma(yi = estimate, sei = std.error, data = Intercepts)
summary(mb_1)
mb_2 <- rma(yi = estimate, sei = std.error, data = Slopes)
summary(mb_2)
meta_power= meta4 %>%
#filter(technology == "BT") #%>%
filter(season == "first")
library(simr)
library(ggplot2)
library(dplyr)
meta_power= meta4 %>%
#filter(technology == "BT") #%>%
filter(season == "first")
# Ajuste do modelo original
sev_lmer <- lmer(yield ~ severity + (1 | year),
data = meta_power,REML = F)
summary(sev_lmer)
performance::check_model(sev_lmer)
confint(sev_lmer)
# Criar um modelo extendido para simula巽達o
ext_sev_lmer <- extend(sev_lmer, along = "severity", n = 10000)
# Rodar v叩rias simula巽探es do powerCurve e armazenar os resultados
num_simulations <- 1  # N炭mero de simula巽探es individuais
power_results <- list()
for (i in 1:num_simulations) {
power_results[[i]] <- as.data.frame(summary(powerCurve(ext_sev_lmer,
along = "severity",
nsim = 100,
breaks = 1:100)))
}
power_df <- bind_rows(power_results, .id = "simulation")
#max(meta_power$severity)
#write_xlsx(power_df, "data/power_bt_first.xlsx")
power_df
library(simr)
library(ggplot2)
library(dplyr)
meta_power= meta4 %>%
#filter(technology == "BT") #%>%
filter(season == "second")
# Ajuste do modelo original
sev_lmer <- lmer(yield ~ severity + (1 | year),
data = meta_power,REML = F)
summary(sev_lmer)
performance::check_model(sev_lmer)
confint(sev_lmer)
# Criar um modelo extendido para simula巽達o
ext_sev_lmer <- extend(sev_lmer, along = "severity", n = 10000)
# Rodar v叩rias simula巽探es do powerCurve e armazenar os resultados
num_simulations <- 1  # N炭mero de simula巽探es individuais
power_results <- list()
for (i in 1:num_simulations) {
power_results[[i]] <- as.data.frame(summary(powerCurve(ext_sev_lmer,
along = "severity",
nsim = 100,
breaks = 1:100)))
}
power_df <- bind_rows(power_results, .id = "simulation")
#max(meta_power$severity)
#write_xlsx(power_df, "data/power_bt_first.xlsx")
# Ajuste do modelo original
sev_lmer <- lmer(yield ~ severity + (1 | year),
data = meta_power,REML = F)
summary(sev_lmer)
confint(sev_lmer)
meta_power= meta4 %>%
#filter(technology == "BT") #%>%
filter(season == "second") %>%
filter(!yield == 0)
# Ajuste do modelo original
sev_lmer <- lmer(yield ~ severity + (1 | year),
data = meta_power,REML = F)
summary(sev_lmer)
performance::check_model(sev_lmer)
confint(sev_lmer)
meta_power= meta4 %>%
#filter(technology == "BT") #%>%
filter(season == "first") %>%
filter(!yield == 0)
# Ajuste do modelo original
sev_lmer <- lmer(yield ~ severity + (1 | year),
data = meta_power,REML = F)
confint(sev_lmer)
summary(sev_lmer)
meta_power= meta4 %>%
#filter(technology == "BT") #%>%
filter(season == "first") %>%
filter(!yield == 0)
# Ajuste do modelo original
sev_lmer <- lmer(yield ~ severity + (1 | year),
data = meta_power,REML = F)
summary(sev_lmer)
meta_power= meta4 %>%
#filter(technology == "BT") #%>%
filter(season == "second") %>%
filter(!yield == 0)
# Ajuste do modelo original
sev_lmer <- lmer(yield ~ severity + (1 | year),
data = meta_power,REML = F)
summary(sev_lmer)
meta_power= meta4 %>%
#filter(technology == "BT") #%>%
filter(season == "second") %>%
filter(!yield == 0)
# Ajuste do modelo original
sev_lmer <- lmer(yield ~ severity + (1 | year),
data = meta_power,REML = F)
summary(sev_lmer)
meta5 = meta4 %>%
#filter(technology == "BT") %>%
filter(season == "second") %>%
#dplyr::group_by(season,technology) %>%
do({
model <- lm(.$yield ~ .$severity + factor(.$year))
tidy_model <- tidy(model)
confint_model <- confint(model)
bind_cols(tidy_model, confint_model)
})
summary(fit_all)
Intercepts <- meta5 |>
filter(term == "(Intercept)")
Slopes <-  meta5 |>
filter(term == ".$severity")
mb_1 <- rma(yi = estimate, sei = std.error, data = Intercepts)
summary(mb_1)
summary(mb_1)
